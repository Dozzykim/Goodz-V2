import React, { useContext, useEffect, useRef, useState } from 'react'
import 'bootstrap/dist/css/bootstrap.min.css';
import { useNavigate } from 'react-router-dom';
import { LoginContext } from '../../contexts/LoginContextProvider';
import { Button, Modal } from 'react-bootstrap';
import SearchedItem from '../../components/post/SearchedItem';
import MainBtn from '../../components/common/MainBtn';
import TagItem from '../../components/post/TagItem';
import * as tag from '../../apis/post/tag';
import * as post from '../../apis/post/post';

const InsertContainer = () => {

    const navigate = useNavigate();

    // Ïú†Ï†Ä Ï†ïÎ≥¥
    const {userInfo} = useContext(LoginContext);
    const userId = userInfo ? userInfo.userId : null;

    const [content, setContent] = useState("");             // Í≤åÏãúÍ∏Ä ÎÇ¥Ïö©
    const [attachedFiles, setAttachedFiles] = useState([]); // Ï≤®Î∂Ä Ïù¥ÎØ∏ÏßÄ
    const [previewImages, setPreviewImages] = useState([]); // Ï≤®Î∂Ä Ïù¥ÎØ∏ÏßÄ ÎØ∏Î¶¨Î≥¥Í∏∞       
    const fileInputRef = useRef(null);                      // ÎåÄÌëúÏù¥ÎØ∏ÏßÄ ÏÑ†ÌÉù
    const [mainImgIndex, setMainImgIndex] = useState(0);    // ÎåÄÌëúÏù¥ÎØ∏ÏßÄ Ïù∏Îç±Ïä§Î≤àÌò∏
    const [searchKeyWord, setSearchKeyword] = useState(''); // ÏÉÅÌíàÌÉúÍ∑∏ Í≤ÄÏÉâ ÌÇ§ÏõåÎìú
    const [searchedItems, setSearchedItems] = useState([]); // Í≤ÄÏÉâÎêú ÏÉÅÌíà
    const [addedTags, setAddedTags] = useState([]);         // Ï∂îÍ∞ÄÎêú ÏÉÅÌíà

    /* üìÑ Í≤åÏãúÍ∏Ä Í¥ÄÎ†® */
    // ÎÇ¥Ïö© ÏûëÏÑ± Í∞êÏßÄ
    const handleContent = (e) => {
        setContent(e.target.value);
        // console.log(e.target.value)
    }
    
    /* üíæÏ≤®Î∂ÄÏù¥ÎØ∏ÏßÄ */
    // Ï≤®Î∂ÄÏù¥ÎØ∏ÏßÄ ÎØ∏Î¶¨Î≥¥Í∏∞ Ï†úÍ≥µ
    const handleFileChange = (e) => {
        const files = Array.from(e.target.files);
        const newPreviewImages = files.map(file => ( {file, url: URL.createObjectURL(file)} ))
        setPreviewImages(newPreviewImages);
        setAttachedFiles(files);
    }
    // ÎåÄÌëúÏù¥ÎØ∏ÏßÄ ÏÑ†ÌÉù
    const selectMainImg = (index)=> {
        setMainImgIndex(index);
    }

    // Í≤åÏãúÍ∏Ä Îì±Î°ù Ï≤òÎ¶¨
    const onSubmit = async(e) => {

        // console.log(content)
        // console.log(attachedFiles)
        // console.log(mainImgIndex)
        // console.log(addedTags)

        e.preventDefault();

        if (attachedFiles.length == 0 || attachedFiles === null) {
            alert('Í≤åÏãúÍ∏ÄÏùÄ Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏµúÏÜå 1Ïû• Ïù¥ÏÉÅ Ï≤®Î∂ÄÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.');
            return;
        }
        if (content === "" || content===null) {
            alert('ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }

        const formData = new FormData();
        formData.append('userId', userId);
        formData.append('content', content);
        attachedFiles.forEach((file, index) => {
            formData.append(`attachedFiles[${index}]`, file);
        });
        formData.append('mainImgIndex', mainImgIndex);
        addedTags.forEach((tag, index) => {
            formData.append(`taggedProducts[${index}]`, tag.pno);
        });

        const headers = {
            headers: {
                'conxtent-Type': 'multipart/form-data'
            }
        }

        try {
            const response = await post.insert(formData, headers);
            const data = response.data;         // Ï≤òÎ¶¨ ÏÑ±Í≥µ Ïãú, ÏûëÏÑ±ÏûêÏùò ÎãâÎÑ§ÏûÑÏùÑ Î∞òÌôòÌï®.
            // console.log(data);
            navigate(`/styles/user/@${data}`);
        } catch (error) {
            console.error("ÏóêÎü¨Î∞úÏÉù...", error);            
        }


    }



    /* üé´ÏÉÅÌíàÌÉúÍ∑∏ Í¥ÄÎ†® */
    // üí®ÏÉÅÌíàÌÉúÍ∑∏ Í≤ÄÏÉâ Í∞êÏßÄ & Í≤ÄÏÉâÏ≤òÎ¶¨
    const handleSearchInput = async(e) => {
        setSearchKeyword(e.target.value);
    }

    // Í≤ÄÏÉâ ÌÇ§ÏõåÎìúÎ°ú ÏÉÅÌíà Í≤ÄÏÉâ
    const searchItem = async (searchKeyWord) => {
        if (searchKeyWord == 0) {
            setSearchedItems([]);
        }
        if (searchKeyWord.length > 0) {     // Í≤ÄÏÉâÌÇ§ÏõåÎìúÎ•º 1Í∏ÄÏûê Ïù¥ÏÉÅ ÏûÖÎ†•
            // console.log(e.target.value);
            const response = await tag.searchItems(searchKeyWord);
            const data = response.data;
            // console.log(response.data);
            setSearchedItems(data);
        }
    }

    // ÏÉÅÌíàÌÉúÍ∑∏ Ï∂îÍ∞Ä
    const addTag = (product) => {
        // console.log(product);
        // Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÏÉÅÌíàÏù∏ÏßÄ ÌôïÏù∏
        const isExisting = addedTags.some(tag => tag.pno === product.pno);  // Í∏∞Ï°¥Ïùò Î∞∞Ïó¥ÏùÑ ÏàúÌöåÌïòÎ©∞ Ï°∞Í±¥ÏùÑ Ï≤¥ÌÅ¨ ‚û°Ô∏è Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÏÉÅÌíàÏù∏ÏßÄ ÌôïÏù∏
        // console.log("Ï°¥Ïû¨Ïó¨Î∂Ä: " +  isExisting);
        
        if (!isExisting) {
            // ÏÉàÎ°úÏö¥ Î∞∞Ïó¥ÏùÑ ÏÉùÏÑ±ÌïòÏó¨ Í∏∞Ï°¥ ÌÉúÍ∑∏Îì§Í≥º ÏÉà ÏÉÅÌíàÏùÑ Ìè¨Ìï®
            const updatedTags = [...addedTags, product];
            setAddedTags(updatedTags);
            // console.log(updatedTags);
        } else {
            // Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÏÉÅÌíàÏù¥ÎùºÎ©¥ ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏïåÎ¶º
            alert("Ïù¥ ÏÉÅÌíàÏùÄ Ïù¥ÎØ∏ ÌÉúÍ∑∏ÎêòÏñ¥ ÏûàÏäµÎãàÎã§.");
        }
    }

    // ÏÉÅÌíàÌÉúÍ∑∏ ÏÇ≠Ï†ú
    const removeTag = (product) => {
        // console.log("ÏÉÅÌíàÌÉúÍ∑∏ ÏÇ≠Ï†úÏöîÏ≤≠")
        // console.log(product);

        const updatedTags = addedTags.filter(tag => tag.pno !== product.pno);

        setAddedTags(updatedTags);
        // console.log(updatedTags);
    }



    // ÏÉÅÌíàÌÉúÍ∑∏ Ï∂îÍ∞Ä Î™®Îã¨Ï∞Ω
    const [show, setShow] = useState(false);
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);

    useEffect(()=>{
        searchItem(searchKeyWord);
    }, [searchKeyWord])

    return (
        <>
            <div className="modal fade" id="exampleModal" tabIndex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div className="modal-dialog modal-dialog-scrollable">
                    <div className="modal-content">
                        <div className="modal-header">
                            <h1 className="modal-title fs-5 fw-bold" id="exampleModalLabel">ÏÉÅÌíàÌÉúÍ∑∏ Ï∂îÍ∞Ä</h1>
                            <button type="button" className="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div className="modal-body">
                            <nav className="navbar">
                                <div className="container-fluid">
                                    {/* <!-- ÏÉÅÌíàÍ≤ÄÏÉâÏ∞Ω --> */}
                                    <div className="d-flex w-100" role="search">
                                        <input className="form-control me-2" type="search" id="searchInput" placeholder="Search" aria-label="Search" />
                                    </div>
                                    {/* <!-- Í≤ÄÏÉâÎêú ÏÉÅÌíà Î¶¨Ïä§Ìä∏ --> */}
                                    <div className="searchResults d-flex flex-column w-100" id="searchResults">
                                    </div>
                                </div>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
            {/* <!-- ÏÉÅÌíàÏ∂îÍ∞Ä Î™®Îã¨Ï∞Ω ÎÅù--> */}

            <div className="container">
        
                <div className="my-5 d-flex flex-column align-items-center">
                    <p className="fs-3 fw-bold" style={{width:'600px'}}>Í≤åÏãúÍ∏Ä Îì±Î°ù</p>

                    <form id="form"style={{width:'600px'}} onSubmit={(e)=> onSubmit(e)}>
                        {/* <!-- Ïù¥ÎØ∏ÏßÄÏ≤®Î∂Ä --> */}
                        <span className="form-text">ÏµúÎåÄ 10Ïû•</span>
                        <input ref={fileInputRef} name="attachedFiles" className="form-control" type="file"  multiple onChange={handleFileChange}/>

                        {/* <!-- Ï≤®Î∂ÄÌååÏùº ÎØ∏Î¶¨Î≥¥Í∏∞ --> */}
                        <div id="imagePreview" style={{ height: '100%', padding: '15px'}}>
                            {previewImages.map( (img, index) => (
                                <img key={index} src={img.url} alt='Ï≤®Î∂ÄÏù¥ÎØ∏ÏßÄ' width={100} height={100} style={{
                                    cursor: 'pointer',
                                    border: index === mainImgIndex ? '2px solid red':'none',
                                    margin: '5px'
                                }}
                                onClick={() => selectMainImg(index)}
                                />
                            ))}
                        </div>

                        {/* <!-- ÎåÄÌëúÎ°ú ÏÑ†ÌÉùÌïú Ïù¥ÎØ∏ÏßÄÍ∞Ä ÎÑòÏñ¥Í∞ê --> */}
                        <input type="hidden" name="mainImgIndex" value={mainImgIndex} />

                        <br />

                        {/* <!-- ÎÇ¥Ïö© --> */}
                        <textarea className="form-control" type="text" placeholder="ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî" onChange={handleContent} style={{boxShadow: 'none' , fontSize: 'smaller', height: '150px'}} ></textarea>

                        <br />

                        {/* <!-- ÏÉÅÌíàÌÉúÍ∑∏ ÏòÅÏó≠ --> */}
                        <div className="d-flex justify-content-between">
                            <label htmlFor="formFileMultiple" className="form-label" style={{fontWeight: 'bold', marginBottom: 0}}>ÏÉÅÌíàÌÉúÍ∑∏</label>
                            {/* <!-- ÏÉÅÌíàÏ∂îÍ∞ÄÎ≤ÑÌäº --> */}
                            
                            <Button variant="primary" onClick={handleShow} style={{width:'30px', height: '30px', backgroundColor:"#393E46", border:"none"}} className='d-flex justify-content-center align-items-center p-0 m-0'>
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="size-6" width="24px" height="24px">
                                    <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                                </svg>
                            </Button>
                        </div>
                            
                
                        {/* <!-- ÌÉúÍ∑∏Îêú ÏÉÅÌíà --> */}
                        <div className="productTag-area border rounded-2">
                            <div className="row row-cols-2 row-cols-md-4 g-2 p-3" style={{minHeight: '233px'}}>
                            {!addedTags || addedTags.length === 0 ?
                            <>
                            </>
                            :
                            <>
                                {addedTags.map((item) => (
                                    <TagItem product={item} removeTag={removeTag}/>
                                ))

                                }
                            </>
                            }
                            </div>
                        </div>
                        <div className="my-5">
                            <MainBtn text={"ÏûëÏÑ± ÏôÑÎ£å"} />
                        </div>
                    </form>
                </div>
            </div>

            {/* <!-- ÏÉÅÌíàÏ∂îÍ∞Ä Î™®Îã¨Ï∞Ω ÏãúÏûë--> */}
            {/* <!-- Modal --> */}
            <Modal show={show} onHide={handleClose}>
                <Modal.Header closeButton>
                    <Modal.Title>ÏÉÅÌíàÌÉúÍ∑∏ Ï∂îÍ∞Ä</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <input className="form-control me-2" value={searchKeyWord} onChange={handleSearchInput} placeholder="Search"/>
                    <div className="d-flex flex-column w-100">
                        {searchedItems.length == 0 ?
                        <>  
                            <br />
                            <h5 className='text-center text-body-tertiary'>Ï°∞ÌöåÎêú ÏÉÅÌíàÏù¥ ÏóÜÏäµÎãàÎã§.</h5>
                            <br />
                        </>
                        :
                        <>
                            {/* <div className="overflow-y-scroll"> */}
                                {searchedItems.map((item) => (
                                    <SearchedItem product={item} addTag={addTag}/>
                                ))}

                            {/* </div> */}
                        </>
                        }
                    </div>
                </Modal.Body>
            </Modal>

        </>
    )
}

export default InsertContainer